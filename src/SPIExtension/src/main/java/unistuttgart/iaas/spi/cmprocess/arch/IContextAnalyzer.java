package unistuttgart.iaas.spi.cmprocess.arch;

import java.util.Map;
import java.util.Set;

import de.uni_stuttgart.iaas.ipsm.v0.TProcessDefinitions;

/**
 * A Generic Interface for Context Analyzer Module.
 * @author Debasis Kar
 */

public interface IContextAnalyzer {
	/**
	 * Any Custom Context Analyzer has to implement the following method that will take
	 * TProcessDefinitions (a set of process definitions/alternatives) as its input parameter. 
	 * The implementation must look for the the context expression of each process and validate
	 * it to the ContextData.xml received received from Query Manager from Middle-ware. The final 
	 * result is stored as a HashTable having tuples e.g. (ProcessID, TruthValue). TruthValue is
	 * decided upon whether the process definition is can be realized under the current context.
	 * @author Debasis Kar
	 * @param TProcessDefinitions
	 * @return Map<String, Boolean> 
	 */
	public Map<String, Boolean> analyzeContext(TProcessDefinitions processSet);
	
	/**
	 * Any Custom Context Analyzer has to implement the following method that will take
	 * Map<String, Boolean> (a hash table of process descriptors) generated by analyzeContext()
	 * method as its input parameter. The implementation must find a way to store the Process 
	 * IDs with TruthValue as true into a Set data structure so that that can be further 
	 * filtered by an Intention Analyzer.
	 * @author Debasis Kar
	 * @param Map<String, Boolean>
	 * @return Set<String> 
	 */
	public Set<String> getProcessListOfContextAnalyzer(Map<String, Boolean> contextAnalyzerProcessTable);
}
